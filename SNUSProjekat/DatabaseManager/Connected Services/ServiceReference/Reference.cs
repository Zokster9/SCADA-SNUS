//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IAuthentication")]
    public interface IAuthentication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Registration", ReplyAction="http://tempuri.org/IAuthentication/RegistrationResponse")]
        bool Registration(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Registration", ReplyAction="http://tempuri.org/IAuthentication/RegistrationResponse")]
        System.Threading.Tasks.Task<bool> RegistrationAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Login", ReplyAction="http://tempuri.org/IAuthentication/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Login", ReplyAction="http://tempuri.org/IAuthentication/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Logout", ReplyAction="http://tempuri.org/IAuthentication/LogoutResponse")]
        bool Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Logout", ReplyAction="http://tempuri.org/IAuthentication/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationChannel : DatabaseManager.ServiceReference.IAuthentication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationClient : System.ServiceModel.ClientBase<DatabaseManager.ServiceReference.IAuthentication>, DatabaseManager.ServiceReference.IAuthentication {
        
        public AuthenticationClient() {
        }
        
        public AuthenticationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Registration(string username, string password) {
            return base.Channel.Registration(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrationAsync(string username, string password) {
            return base.Channel.RegistrationAsync(username, password);
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool Logout(string token) {
            return base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IDatabaseManager")]
    public interface IDatabaseManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadScadaConfig", ReplyAction="http://tempuri.org/IDatabaseManager/LoadScadaConfigResponse")]
        void LoadScadaConfig();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadScadaConfig", ReplyAction="http://tempuri.org/IDatabaseManager/LoadScadaConfigResponse")]
        System.Threading.Tasks.Task LoadScadaConfigAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeOutputValueResponse")]
        bool ChangeOutputValue(double output, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeOutputValueResponse")]
        System.Threading.Tasks.Task<bool> ChangeOutputValueAsync(double output, string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/GetOutputValueResponse")]
        double GetOutputValue(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/GetOutputValue", ReplyAction="http://tempuri.org/IDatabaseManager/GetOutputValueResponse")]
        System.Threading.Tasks.Task<double> GetOutputValueAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeScanState", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeScanStateResponse")]
        bool ChangeScanState(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ChangeScanState", ReplyAction="http://tempuri.org/IDatabaseManager/ChangeScanStateResponse")]
        System.Threading.Tasks.Task<bool> ChangeScanStateAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddDigitalInputTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddDigitalInputTagResponse")]
        bool AddDigitalInputTag(string tagName, string description, string driver, string ioAddress, int scanTime, bool onOffScan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddDigitalInputTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddDigitalInputTagResponse")]
        System.Threading.Tasks.Task<bool> AddDigitalInputTagAsync(string tagName, string description, string driver, string ioAddress, int scanTime, bool onOffScan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddDigitalOutputTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddDigitalOutputTagResponse")]
        bool AddDigitalOutputTag(string tagName, string description, string ioAddress, double initialValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddDigitalOutputTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddDigitalOutputTagResponse")]
        System.Threading.Tasks.Task<bool> AddDigitalOutputTagAsync(string tagName, string description, string ioAddress, double initialValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAnalogInputTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddAnalogInputTagResponse")]
        bool AddAnalogInputTag(string tagName, string description, string driver, string ioAddress, int scanTime, bool onOffScan, double lowLimit, double highLimit, string units);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAnalogInputTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddAnalogInputTagResponse")]
        System.Threading.Tasks.Task<bool> AddAnalogInputTagAsync(string tagName, string description, string driver, string ioAddress, int scanTime, bool onOffScan, double lowLimit, double highLimit, string units);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAnalogOutputTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddAnalogOutputTagResponse")]
        bool AddAnalogOutputTag(string tagName, string description, string ioAddress, double initialValue, double lowLimit, double highLimit, string units);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAnalogOutputTag", ReplyAction="http://tempuri.org/IDatabaseManager/AddAnalogOutputTagResponse")]
        System.Threading.Tasks.Task<bool> AddAnalogOutputTagAsync(string tagName, string description, string ioAddress, double initialValue, double lowLimit, double highLimit, string units);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveTag", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveTagResponse")]
        bool RemoveTag(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveTag", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveTagResponse")]
        System.Threading.Tasks.Task<bool> RemoveTagAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/AddAlarmResponse")]
        bool AddAlarm(string tagName, string type, int priority, double limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/AddAlarmResponse")]
        System.Threading.Tasks.Task<bool> AddAlarmAsync(string tagName, string type, int priority, double limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveAlarmResponse")]
        bool RemoveAlarm(string tagName, string type, int priority, double limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveAlarmResponse")]
        System.Threading.Tasks.Task<bool> RemoveAlarmAsync(string tagName, string type, int priority, double limit);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerChannel : DatabaseManager.ServiceReference.IDatabaseManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerClient : System.ServiceModel.ClientBase<DatabaseManager.ServiceReference.IDatabaseManager>, DatabaseManager.ServiceReference.IDatabaseManager {
        
        public DatabaseManagerClient() {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void LoadScadaConfig() {
            base.Channel.LoadScadaConfig();
        }
        
        public System.Threading.Tasks.Task LoadScadaConfigAsync() {
            return base.Channel.LoadScadaConfigAsync();
        }
        
        public bool ChangeOutputValue(double output, string tagName) {
            return base.Channel.ChangeOutputValue(output, tagName);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeOutputValueAsync(double output, string tagName) {
            return base.Channel.ChangeOutputValueAsync(output, tagName);
        }
        
        public double GetOutputValue(string tagName) {
            return base.Channel.GetOutputValue(tagName);
        }
        
        public System.Threading.Tasks.Task<double> GetOutputValueAsync(string tagName) {
            return base.Channel.GetOutputValueAsync(tagName);
        }
        
        public bool ChangeScanState(string tagName) {
            return base.Channel.ChangeScanState(tagName);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeScanStateAsync(string tagName) {
            return base.Channel.ChangeScanStateAsync(tagName);
        }
        
        public bool AddDigitalInputTag(string tagName, string description, string driver, string ioAddress, int scanTime, bool onOffScan) {
            return base.Channel.AddDigitalInputTag(tagName, description, driver, ioAddress, scanTime, onOffScan);
        }
        
        public System.Threading.Tasks.Task<bool> AddDigitalInputTagAsync(string tagName, string description, string driver, string ioAddress, int scanTime, bool onOffScan) {
            return base.Channel.AddDigitalInputTagAsync(tagName, description, driver, ioAddress, scanTime, onOffScan);
        }
        
        public bool AddDigitalOutputTag(string tagName, string description, string ioAddress, double initialValue) {
            return base.Channel.AddDigitalOutputTag(tagName, description, ioAddress, initialValue);
        }
        
        public System.Threading.Tasks.Task<bool> AddDigitalOutputTagAsync(string tagName, string description, string ioAddress, double initialValue) {
            return base.Channel.AddDigitalOutputTagAsync(tagName, description, ioAddress, initialValue);
        }
        
        public bool AddAnalogInputTag(string tagName, string description, string driver, string ioAddress, int scanTime, bool onOffScan, double lowLimit, double highLimit, string units) {
            return base.Channel.AddAnalogInputTag(tagName, description, driver, ioAddress, scanTime, onOffScan, lowLimit, highLimit, units);
        }
        
        public System.Threading.Tasks.Task<bool> AddAnalogInputTagAsync(string tagName, string description, string driver, string ioAddress, int scanTime, bool onOffScan, double lowLimit, double highLimit, string units) {
            return base.Channel.AddAnalogInputTagAsync(tagName, description, driver, ioAddress, scanTime, onOffScan, lowLimit, highLimit, units);
        }
        
        public bool AddAnalogOutputTag(string tagName, string description, string ioAddress, double initialValue, double lowLimit, double highLimit, string units) {
            return base.Channel.AddAnalogOutputTag(tagName, description, ioAddress, initialValue, lowLimit, highLimit, units);
        }
        
        public System.Threading.Tasks.Task<bool> AddAnalogOutputTagAsync(string tagName, string description, string ioAddress, double initialValue, double lowLimit, double highLimit, string units) {
            return base.Channel.AddAnalogOutputTagAsync(tagName, description, ioAddress, initialValue, lowLimit, highLimit, units);
        }
        
        public bool RemoveTag(string tagName) {
            return base.Channel.RemoveTag(tagName);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTagAsync(string tagName) {
            return base.Channel.RemoveTagAsync(tagName);
        }
        
        public bool AddAlarm(string tagName, string type, int priority, double limit) {
            return base.Channel.AddAlarm(tagName, type, priority, limit);
        }
        
        public System.Threading.Tasks.Task<bool> AddAlarmAsync(string tagName, string type, int priority, double limit) {
            return base.Channel.AddAlarmAsync(tagName, type, priority, limit);
        }
        
        public bool RemoveAlarm(string tagName, string type, int priority, double limit) {
            return base.Channel.RemoveAlarm(tagName, type, priority, limit);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAlarmAsync(string tagName, string type, int priority, double limit) {
            return base.Channel.RemoveAlarmAsync(tagName, type, priority, limit);
        }
    }
}
